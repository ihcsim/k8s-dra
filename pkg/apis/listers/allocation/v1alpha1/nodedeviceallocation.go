/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/k8s-dra/pkg/apis/allocation/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeDeviceAllocationLister helps list NodeDeviceAllocations.
// All objects returned here must be treated as read-only.
type NodeDeviceAllocationLister interface {
	// List lists all NodeDeviceAllocations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeDeviceAllocation, err error)
	// NodeDeviceAllocations returns an object that can list and get NodeDeviceAllocations.
	NodeDeviceAllocations(namespace string) NodeDeviceAllocationNamespaceLister
	NodeDeviceAllocationListerExpansion
}

// nodeDeviceAllocationLister implements the NodeDeviceAllocationLister interface.
type nodeDeviceAllocationLister struct {
	indexer cache.Indexer
}

// NewNodeDeviceAllocationLister returns a new NodeDeviceAllocationLister.
func NewNodeDeviceAllocationLister(indexer cache.Indexer) NodeDeviceAllocationLister {
	return &nodeDeviceAllocationLister{indexer: indexer}
}

// List lists all NodeDeviceAllocations in the indexer.
func (s *nodeDeviceAllocationLister) List(selector labels.Selector) (ret []*v1alpha1.NodeDeviceAllocation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeDeviceAllocation))
	})
	return ret, err
}

// NodeDeviceAllocations returns an object that can list and get NodeDeviceAllocations.
func (s *nodeDeviceAllocationLister) NodeDeviceAllocations(namespace string) NodeDeviceAllocationNamespaceLister {
	return nodeDeviceAllocationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeDeviceAllocationNamespaceLister helps list and get NodeDeviceAllocations.
// All objects returned here must be treated as read-only.
type NodeDeviceAllocationNamespaceLister interface {
	// List lists all NodeDeviceAllocations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodeDeviceAllocation, err error)
	// Get retrieves the NodeDeviceAllocation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodeDeviceAllocation, error)
	NodeDeviceAllocationNamespaceListerExpansion
}

// nodeDeviceAllocationNamespaceLister implements the NodeDeviceAllocationNamespaceLister
// interface.
type nodeDeviceAllocationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeDeviceAllocations in the indexer for a given namespace.
func (s nodeDeviceAllocationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodeDeviceAllocation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodeDeviceAllocation))
	})
	return ret, err
}

// Get retrieves the NodeDeviceAllocation from the indexer for a given namespace and name.
func (s nodeDeviceAllocationNamespaceLister) Get(name string) (*v1alpha1.NodeDeviceAllocation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodedeviceallocation"), name)
	}
	return obj.(*v1alpha1.NodeDeviceAllocation), nil
}
