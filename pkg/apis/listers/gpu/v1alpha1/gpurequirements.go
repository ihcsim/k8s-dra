/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/k8s-dra/pkg/apis/gpu/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GPURequirementsLister helps list GPURequirements.
// All objects returned here must be treated as read-only.
type GPURequirementsLister interface {
	// List lists all GPURequirements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GPURequirements, err error)
	// GPURequirements returns an object that can list and get GPURequirements.
	GPURequirements(namespace string) GPURequirementsNamespaceLister
	GPURequirementsListerExpansion
}

// gPURequirementsLister implements the GPURequirementsLister interface.
type gPURequirementsLister struct {
	indexer cache.Indexer
}

// NewGPURequirementsLister returns a new GPURequirementsLister.
func NewGPURequirementsLister(indexer cache.Indexer) GPURequirementsLister {
	return &gPURequirementsLister{indexer: indexer}
}

// List lists all GPURequirements in the indexer.
func (s *gPURequirementsLister) List(selector labels.Selector) (ret []*v1alpha1.GPURequirements, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GPURequirements))
	})
	return ret, err
}

// GPURequirements returns an object that can list and get GPURequirements.
func (s *gPURequirementsLister) GPURequirements(namespace string) GPURequirementsNamespaceLister {
	return gPURequirementsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GPURequirementsNamespaceLister helps list and get GPURequirements.
// All objects returned here must be treated as read-only.
type GPURequirementsNamespaceLister interface {
	// List lists all GPURequirements in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GPURequirements, err error)
	// Get retrieves the GPURequirements from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GPURequirements, error)
	GPURequirementsNamespaceListerExpansion
}

// gPURequirementsNamespaceLister implements the GPURequirementsNamespaceLister
// interface.
type gPURequirementsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GPURequirements in the indexer for a given namespace.
func (s gPURequirementsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GPURequirements, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GPURequirements))
	})
	return ret, err
}

// Get retrieves the GPURequirements from the indexer for a given namespace and name.
func (s gPURequirementsNamespaceLister) Get(name string) (*v1alpha1.GPURequirements, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gpurequirements"), name)
	}
	return obj.(*v1alpha1.GPURequirements), nil
}
