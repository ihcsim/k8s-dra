/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/k8s-dra/pkg/apis/gpu/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GPUClaimParametersLister helps list GPUClaimParameters.
// All objects returned here must be treated as read-only.
type GPUClaimParametersLister interface {
	// List lists all GPUClaimParameters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GPUClaimParameters, err error)
	// GPUClaimParameters returns an object that can list and get GPUClaimParameters.
	GPUClaimParameters(namespace string) GPUClaimParametersNamespaceLister
	GPUClaimParametersListerExpansion
}

// gPUClaimParametersLister implements the GPUClaimParametersLister interface.
type gPUClaimParametersLister struct {
	indexer cache.Indexer
}

// NewGPUClaimParametersLister returns a new GPUClaimParametersLister.
func NewGPUClaimParametersLister(indexer cache.Indexer) GPUClaimParametersLister {
	return &gPUClaimParametersLister{indexer: indexer}
}

// List lists all GPUClaimParameters in the indexer.
func (s *gPUClaimParametersLister) List(selector labels.Selector) (ret []*v1alpha1.GPUClaimParameters, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GPUClaimParameters))
	})
	return ret, err
}

// GPUClaimParameters returns an object that can list and get GPUClaimParameters.
func (s *gPUClaimParametersLister) GPUClaimParameters(namespace string) GPUClaimParametersNamespaceLister {
	return gPUClaimParametersNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GPUClaimParametersNamespaceLister helps list and get GPUClaimParameters.
// All objects returned here must be treated as read-only.
type GPUClaimParametersNamespaceLister interface {
	// List lists all GPUClaimParameters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GPUClaimParameters, err error)
	// Get retrieves the GPUClaimParameters from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GPUClaimParameters, error)
	GPUClaimParametersNamespaceListerExpansion
}

// gPUClaimParametersNamespaceLister implements the GPUClaimParametersNamespaceLister
// interface.
type gPUClaimParametersNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GPUClaimParameters in the indexer for a given namespace.
func (s gPUClaimParametersNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GPUClaimParameters, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GPUClaimParameters))
	})
	return ret, err
}

// Get retrieves the GPUClaimParameters from the indexer for a given namespace and name.
func (s gPUClaimParametersNamespaceLister) Get(name string) (*v1alpha1.GPUClaimParameters, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gpuclaimparameters"), name)
	}
	return obj.(*v1alpha1.GPUClaimParameters), nil
}
