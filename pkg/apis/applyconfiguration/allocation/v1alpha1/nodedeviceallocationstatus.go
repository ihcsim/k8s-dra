/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/k8s-dra/pkg/apis/allocation/v1alpha1"
)

// NodeDeviceAllocationStatusApplyConfiguration represents an declarative configuration of the NodeDeviceAllocationStatus type for use
// with apply.
type NodeDeviceAllocationStatusApplyConfiguration struct {
	State              *v1alpha1.NodeDeviceAllocationState           `json:"state,omitempty"`
	AllocatableDevices []AllocatableDeviceApplyConfiguration         `json:"allocatableDevices,omitempty"`
	AllocatedClaims    map[string]AllocatedDevicesApplyConfiguration `json:"allocatedClaims,omitempty"`
	PreparedClaims     map[string]PreparedDevicesApplyConfiguration  `json:"preparedClaims,omitempty"`
}

// NodeDeviceAllocationStatusApplyConfiguration constructs an declarative configuration of the NodeDeviceAllocationStatus type for use with
// apply.
func NodeDeviceAllocationStatus() *NodeDeviceAllocationStatusApplyConfiguration {
	return &NodeDeviceAllocationStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *NodeDeviceAllocationStatusApplyConfiguration) WithState(value v1alpha1.NodeDeviceAllocationState) *NodeDeviceAllocationStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithAllocatableDevices adds the given value to the AllocatableDevices field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllocatableDevices field.
func (b *NodeDeviceAllocationStatusApplyConfiguration) WithAllocatableDevices(values ...*AllocatableDeviceApplyConfiguration) *NodeDeviceAllocationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAllocatableDevices")
		}
		b.AllocatableDevices = append(b.AllocatableDevices, *values[i])
	}
	return b
}

// WithAllocatedClaims puts the entries into the AllocatedClaims field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AllocatedClaims field,
// overwriting an existing map entries in AllocatedClaims field with the same key.
func (b *NodeDeviceAllocationStatusApplyConfiguration) WithAllocatedClaims(entries map[string]AllocatedDevicesApplyConfiguration) *NodeDeviceAllocationStatusApplyConfiguration {
	if b.AllocatedClaims == nil && len(entries) > 0 {
		b.AllocatedClaims = make(map[string]AllocatedDevicesApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.AllocatedClaims[k] = v
	}
	return b
}

// WithPreparedClaims puts the entries into the PreparedClaims field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PreparedClaims field,
// overwriting an existing map entries in PreparedClaims field with the same key.
func (b *NodeDeviceAllocationStatusApplyConfiguration) WithPreparedClaims(entries map[string]PreparedDevicesApplyConfiguration) *NodeDeviceAllocationStatusApplyConfiguration {
	if b.PreparedClaims == nil && len(entries) > 0 {
		b.PreparedClaims = make(map[string]PreparedDevicesApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.PreparedClaims[k] = v
	}
	return b
}
