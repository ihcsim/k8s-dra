/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/k8s-dra/pkg/apis/gpu/v1alpha1"
)

// NodeDevicesStatusApplyConfiguration represents an declarative configuration of the NodeDevicesStatus type for use
// with apply.
type NodeDevicesStatusApplyConfiguration struct {
	State         *v1alpha1.NodeDevicesAllocationState `json:"state,omitempty"`
	AllocatedGPUs map[string][]*v1alpha1.GPUDevice     `json:"allocatedGpus,omitempty"`
	PreparedGPUs  map[string][]*v1alpha1.GPUDevice     `json:"preparedGpus,omitempty"`
}

// NodeDevicesStatusApplyConfiguration constructs an declarative configuration of the NodeDevicesStatus type for use with
// apply.
func NodeDevicesStatus() *NodeDevicesStatusApplyConfiguration {
	return &NodeDevicesStatusApplyConfiguration{}
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *NodeDevicesStatusApplyConfiguration) WithState(value v1alpha1.NodeDevicesAllocationState) *NodeDevicesStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithAllocatedGPUs puts the entries into the AllocatedGPUs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AllocatedGPUs field,
// overwriting an existing map entries in AllocatedGPUs field with the same key.
func (b *NodeDevicesStatusApplyConfiguration) WithAllocatedGPUs(entries map[string][]*v1alpha1.GPUDevice) *NodeDevicesStatusApplyConfiguration {
	if b.AllocatedGPUs == nil && len(entries) > 0 {
		b.AllocatedGPUs = make(map[string][]*v1alpha1.GPUDevice, len(entries))
	}
	for k, v := range entries {
		b.AllocatedGPUs[k] = v
	}
	return b
}

// WithPreparedGPUs puts the entries into the PreparedGPUs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the PreparedGPUs field,
// overwriting an existing map entries in PreparedGPUs field with the same key.
func (b *NodeDevicesStatusApplyConfiguration) WithPreparedGPUs(entries map[string][]*v1alpha1.GPUDevice) *NodeDevicesStatusApplyConfiguration {
	if b.PreparedGPUs == nil && len(entries) > 0 {
		b.PreparedGPUs = make(map[string][]*v1alpha1.GPUDevice, len(entries))
	}
	for k, v := range entries {
		b.PreparedGPUs[k] = v
	}
	return b
}
