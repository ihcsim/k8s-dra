/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	gpuv1alpha1 "github.com/ihcsim/k8s-dra/pkg/apis/applyconfiguration/gpu/v1alpha1"
	scheme "github.com/ihcsim/k8s-dra/pkg/apis/clientset/versioned/scheme"
	v1alpha1 "github.com/ihcsim/k8s-dra/pkg/apis/gpu/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NodeGPUSlicesGetter has a method to return a NodeGPUSlicesInterface.
// A group's client should implement this interface.
type NodeGPUSlicesGetter interface {
	NodeGPUSlices(namespace string) NodeGPUSlicesInterface
}

// NodeGPUSlicesInterface has methods to work with NodeGPUSlices resources.
type NodeGPUSlicesInterface interface {
	Create(ctx context.Context, nodeGPUSlices *v1alpha1.NodeGPUSlices, opts v1.CreateOptions) (*v1alpha1.NodeGPUSlices, error)
	Update(ctx context.Context, nodeGPUSlices *v1alpha1.NodeGPUSlices, opts v1.UpdateOptions) (*v1alpha1.NodeGPUSlices, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.NodeGPUSlices, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.NodeGPUSlicesList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NodeGPUSlices, err error)
	Apply(ctx context.Context, nodeGPUSlices *gpuv1alpha1.NodeGPUSlicesApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.NodeGPUSlices, err error)
	NodeGPUSlicesExpansion
}

// nodeGPUSlices implements NodeGPUSlicesInterface
type nodeGPUSlices struct {
	client rest.Interface
	ns     string
}

// newNodeGPUSlices returns a NodeGPUSlices
func newNodeGPUSlices(c *GpuV1alpha1Client, namespace string) *nodeGPUSlices {
	return &nodeGPUSlices{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the nodeGPUSlices, and returns the corresponding nodeGPUSlices object, and an error if there is any.
func (c *nodeGPUSlices) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.NodeGPUSlices, err error) {
	result = &v1alpha1.NodeGPUSlices{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("nodegpuslices").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NodeGPUSlices that match those selectors.
func (c *nodeGPUSlices) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.NodeGPUSlicesList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.NodeGPUSlicesList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("nodegpuslices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nodeGPUSlices.
func (c *nodeGPUSlices) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("nodegpuslices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a nodeGPUSlices and creates it.  Returns the server's representation of the nodeGPUSlices, and an error, if there is any.
func (c *nodeGPUSlices) Create(ctx context.Context, nodeGPUSlices *v1alpha1.NodeGPUSlices, opts v1.CreateOptions) (result *v1alpha1.NodeGPUSlices, err error) {
	result = &v1alpha1.NodeGPUSlices{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("nodegpuslices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nodeGPUSlices).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a nodeGPUSlices and updates it. Returns the server's representation of the nodeGPUSlices, and an error, if there is any.
func (c *nodeGPUSlices) Update(ctx context.Context, nodeGPUSlices *v1alpha1.NodeGPUSlices, opts v1.UpdateOptions) (result *v1alpha1.NodeGPUSlices, err error) {
	result = &v1alpha1.NodeGPUSlices{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("nodegpuslices").
		Name(nodeGPUSlices.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(nodeGPUSlices).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the nodeGPUSlices and deletes it. Returns an error if one occurs.
func (c *nodeGPUSlices) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("nodegpuslices").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nodeGPUSlices) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("nodegpuslices").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched nodeGPUSlices.
func (c *nodeGPUSlices) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NodeGPUSlices, err error) {
	result = &v1alpha1.NodeGPUSlices{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("nodegpuslices").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied nodeGPUSlices.
func (c *nodeGPUSlices) Apply(ctx context.Context, nodeGPUSlices *gpuv1alpha1.NodeGPUSlicesApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.NodeGPUSlices, err error) {
	if nodeGPUSlices == nil {
		return nil, fmt.Errorf("nodeGPUSlices provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(nodeGPUSlices)
	if err != nil {
		return nil, err
	}
	name := nodeGPUSlices.Name
	if name == nil {
		return nil, fmt.Errorf("nodeGPUSlices.Name must be provided to Apply")
	}
	result = &v1alpha1.NodeGPUSlices{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("nodegpuslices").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
